parameter (or (or (string %deleteName) (pair %registerName (int %duration) (pair (string %name) (address %resolver)))) (or (pair %transferNameOwnership (string %name) (address %newNameOwner)) (or (pair %updateRegistrationPeriod (int %duration) (string %name)) (pair %updateResolver (string %name) (address %resolver)))));
storage   (pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price))));
code
  {
    DUP;        # pair @parameter @storage : pair @parameter @storage
    CDR;        # @storage : pair @parameter @storage
    SWAP;       # pair @parameter @storage : @storage
    CAR;        # @parameter : @storage
    IF_LEFT
      {
        IF_LEFT
          {
            # Entry point: deleteName # @parameter%deleteName : @storage
            # sp.verify(self.data.nameRegistry.contains(params.name), message = 'Name not registered') # @parameter%deleteName : @storage
            SWAP;       # @storage : @parameter%deleteName
            DUP;        # @storage : @storage : @parameter%deleteName
            DUG 2;      # @storage : @parameter%deleteName : @storage
            CDDAR;      # big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%deleteName : @storage
            SWAP;       # @parameter%deleteName : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @storage
            DUP;        # @parameter%deleteName : @parameter%deleteName : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @storage
            DUG 2;      # @parameter%deleteName : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%deleteName : @storage
            MEM;        # bool : @parameter%deleteName : @storage
            IF
              {}
              {
                PUSH string "Name not registered"; # string : @parameter%deleteName : @storage
                FAILWITH;   # FAILED
              }; # @parameter%deleteName : @storage
            # sp.verify(~ (sp.now > sp.add_seconds(self.data.nameRegistry[params.name].registeredAt, self.data.nameRegistry[params.name].registrationPeriod)), message = 'Name registration has expired') # @parameter%deleteName : @storage
            SWAP;       # @storage : @parameter%deleteName
            DUP;        # @storage : @storage : @parameter%deleteName
            DUG 2;      # @storage : @parameter%deleteName : @storage
            CDDAR;      # big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%deleteName : @storage
            SWAP;       # @parameter%deleteName : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @storage
            DUP;        # @parameter%deleteName : @parameter%deleteName : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @storage
            DUG 2;      # @parameter%deleteName : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%deleteName : @storage
            GET;        # option (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%deleteName : @storage
            IF_SOME
              {
                # of_some: Get-item:86 # @some : @parameter%deleteName : @storage
              }
              {
                PUSH string "Get-item:86"; # string : @parameter%deleteName : @storage
                FAILWITH;   # FAILED
              }; # @some : @parameter%deleteName : @storage
            CDAR;       # timestamp : @parameter%deleteName : @storage
            DIG 2;      # @storage : timestamp : @parameter%deleteName
            DUP;        # @storage : @storage : timestamp : @parameter%deleteName
            DUG 3;      # @storage : timestamp : @parameter%deleteName : @storage
            CDDAR;      # big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : timestamp : @parameter%deleteName : @storage
            DIG 2;      # @parameter%deleteName : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : timestamp : @storage
            DUP;        # @parameter%deleteName : @parameter%deleteName : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : timestamp : @storage
            DUG 3;      # @parameter%deleteName : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : timestamp : @parameter%deleteName : @storage
            GET;        # option (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : timestamp : @parameter%deleteName : @storage
            IF_SOME
              {
                # of_some: Get-item:86 # @some : timestamp : @parameter%deleteName : @storage
              }
              {
                PUSH string "Get-item:86"; # string : timestamp : @parameter%deleteName : @storage
                FAILWITH;   # FAILED
              }; # @some : timestamp : @parameter%deleteName : @storage
            CDDAR;      # int : timestamp : @parameter%deleteName : @storage
            ADD;        # timestamp : @parameter%deleteName : @storage
            NOW;        # timestamp : timestamp : @parameter%deleteName : @storage
            COMPARE;    # int : @parameter%deleteName : @storage
            GT;         # bool : @parameter%deleteName : @storage
            IF
              {
                PUSH string "Name registration has expired"; # string : @parameter%deleteName : @storage
                FAILWITH;   # FAILED
              }
              {}; # @parameter%deleteName : @storage
            # sp.verify((sp.sender == self.data.nameRegistry[params.name].owner) | (sp.sender == self.data.domainManager), message = 'Invalid permissions') # @parameter%deleteName : @storage
            SWAP;       # @storage : @parameter%deleteName
            DUP;        # @storage : @storage : @parameter%deleteName
            DUG 2;      # @storage : @parameter%deleteName : @storage
            CDDAR;      # big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%deleteName : @storage
            SWAP;       # @parameter%deleteName : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @storage
            DUP;        # @parameter%deleteName : @parameter%deleteName : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @storage
            DUG 2;      # @parameter%deleteName : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%deleteName : @storage
            GET;        # option (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%deleteName : @storage
            IF_SOME
              {
                # of_some: Get-item:86 # @some : @parameter%deleteName : @storage
              }
              {
                PUSH string "Get-item:86"; # string : @parameter%deleteName : @storage
                FAILWITH;   # FAILED
              }; # @some : @parameter%deleteName : @storage
            CADDR;      # address : @parameter%deleteName : @storage
            SENDER;     # address : address : @parameter%deleteName : @storage
            COMPARE;    # int : @parameter%deleteName : @storage
            EQ;         # bool : @parameter%deleteName : @storage
            IF
              {
                PUSH bool True; # bool : @parameter%deleteName : @storage
              }
              {
                SWAP;       # @storage : @parameter%deleteName
                DUP;        # @storage : @storage : @parameter%deleteName
                DUG 2;      # @storage : @parameter%deleteName : @storage
                CADAR;      # address : @parameter%deleteName : @storage
                SENDER;     # address : address : @parameter%deleteName : @storage
                COMPARE;    # int : @parameter%deleteName : @storage
                EQ;         # bool : @parameter%deleteName : @storage
              }; # bool : @parameter%deleteName : @storage
            IF
              {}
              {
                PUSH string "Invalid permissions"; # string : @parameter%deleteName : @storage
                FAILWITH;   # FAILED
              }; # @parameter%deleteName : @storage
            # del self.data.addressRegistry[self.data.nameRegistry[params.name].resolver] # @parameter%deleteName : @storage
            SWAP;       # @storage : @parameter%deleteName
            DUP;        # @storage : @storage : @parameter%deleteName
            DUG 2;      # @storage : @parameter%deleteName : @storage
            DUP;        # @storage : @storage : @parameter%deleteName : @storage
            CDR;        # pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : @storage : @parameter%deleteName : @storage
            SWAP;       # @storage : pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : @parameter%deleteName : @storage
            CAR;        # pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : @parameter%deleteName : @storage
            DUP;        # pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : @parameter%deleteName : @storage
            CDR;        # pair (address %domainManager) (int %interval) : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : @parameter%deleteName : @storage
            SWAP;       # pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : pair (address %domainManager) (int %interval) : pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : @parameter%deleteName : @storage
            CAR;        # big_map address string : pair (address %domainManager) (int %interval) : pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : @parameter%deleteName : @storage
            NONE string; # option string : big_map address string : pair (address %domainManager) (int %interval) : pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : @parameter%deleteName : @storage
            DIG 5;      # @storage : option string : big_map address string : pair (address %domainManager) (int %interval) : pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : @parameter%deleteName
            DUP;        # @storage : @storage : option string : big_map address string : pair (address %domainManager) (int %interval) : pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : @parameter%deleteName
            DUG 6;      # @storage : option string : big_map address string : pair (address %domainManager) (int %interval) : pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : @parameter%deleteName : @storage
            CDDAR;      # big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : option string : big_map address string : pair (address %domainManager) (int %interval) : pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : @parameter%deleteName : @storage
            DIG 5;      # @parameter%deleteName : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : option string : big_map address string : pair (address %domainManager) (int %interval) : pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : @storage
            DUP;        # @parameter%deleteName : @parameter%deleteName : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : option string : big_map address string : pair (address %domainManager) (int %interval) : pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : @storage
            DUG 6;      # @parameter%deleteName : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : option string : big_map address string : pair (address %domainManager) (int %interval) : pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : @parameter%deleteName : @storage
            GET;        # option (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : option string : big_map address string : pair (address %domainManager) (int %interval) : pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : @parameter%deleteName : @storage
            IF_SOME
              {
                # of_some: Get-item:86 # @some : option string : big_map address string : pair (address %domainManager) (int %interval) : pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : @parameter%deleteName : @storage
              }
              {
                PUSH string "Get-item:86"; # string : option string : big_map address string : pair (address %domainManager) (int %interval) : pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : @parameter%deleteName : @storage
                FAILWITH;   # FAILED
              }; # @some : option string : big_map address string : pair (address %domainManager) (int %interval) : pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : @parameter%deleteName : @storage
            CDDDR;      # address : option string : big_map address string : pair (address %domainManager) (int %interval) : pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : @parameter%deleteName : @storage
            UPDATE;     # big_map address string : pair (address %domainManager) (int %interval) : pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : @parameter%deleteName : @storage
            PAIR;       # pair (big_map address string) (pair (address %domainManager) (int %interval)) : pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : @parameter%deleteName : @storage
            PAIR;       # pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price))) : @parameter%deleteName : @storage
            DUG 2;      # @parameter%deleteName : @storage : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)))
            SWAP;       # @storage : @parameter%deleteName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)))
            DROP;       # @parameter%deleteName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)))
            # del self.data.nameRegistry[params.name] # @parameter%deleteName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)))
            SWAP;       # pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price))) : @parameter%deleteName
            DUP;        # pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price))) : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price))) : @parameter%deleteName
            DUG 2;      # pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price))) : @parameter%deleteName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)))
            DUP;        # pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price))) : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price))) : @parameter%deleteName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)))
            CAR;        # pair (big_map address string) (pair (address %domainManager) (int %interval)) : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price))) : @parameter%deleteName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)))
            SWAP;       # pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price))) : pair (big_map address string) (pair (address %domainManager) (int %interval)) : @parameter%deleteName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)))
            CDR;        # pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : pair (big_map address string) (pair (address %domainManager) (int %interval)) : @parameter%deleteName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)))
            DUP;        # pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : pair (big_map address string) (pair (address %domainManager) (int %interval)) : @parameter%deleteName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)))
            CAR;        # int : pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : pair (big_map address string) (pair (address %domainManager) (int %interval)) : @parameter%deleteName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)))
            SWAP;       # pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : int : pair (big_map address string) (pair (address %domainManager) (int %interval)) : @parameter%deleteName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)))
            CDR;        # pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price) : int : pair (big_map address string) (pair (address %domainManager) (int %interval)) : @parameter%deleteName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)))
            DUP;        # pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price) : pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price) : int : pair (big_map address string) (pair (address %domainManager) (int %interval)) : @parameter%deleteName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)))
            CDR;        # mutez : pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price) : int : pair (big_map address string) (pair (address %domainManager) (int %interval)) : @parameter%deleteName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)))
            SWAP;       # pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price) : mutez : int : pair (big_map address string) (pair (address %domainManager) (int %interval)) : @parameter%deleteName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)))
            CAR;        # big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map address string) (pair (address %domainManager) (int %interval)) : @parameter%deleteName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)))
            NONE (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))); # option (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map address string) (pair (address %domainManager) (int %interval)) : @parameter%deleteName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)))
            DIG 5;      # @parameter%deleteName : option (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map address string) (pair (address %domainManager) (int %interval)) : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)))
            DUP;        # @parameter%deleteName : @parameter%deleteName : option (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map address string) (pair (address %domainManager) (int %interval)) : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)))
            DUG 6;      # @parameter%deleteName : option (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map address string) (pair (address %domainManager) (int %interval)) : @parameter%deleteName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)))
            UPDATE;     # big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map address string) (pair (address %domainManager) (int %interval)) : @parameter%deleteName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)))
            PAIR;       # pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez : int : pair (big_map address string) (pair (address %domainManager) (int %interval)) : @parameter%deleteName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)))
            SWAP;       # int : pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez : pair (big_map address string) (pair (address %domainManager) (int %interval)) : @parameter%deleteName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)))
            PAIR;       # pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez) : pair (big_map address string) (pair (address %domainManager) (int %interval)) : @parameter%deleteName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)))
            SWAP;       # pair (big_map address string) (pair (address %domainManager) (int %interval)) : pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez) : @parameter%deleteName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)))
            PAIR;       # pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez)) : @parameter%deleteName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)))
            DUG 2;      # @parameter%deleteName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price))) : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            DROP;       # pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price))) : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            DROP;       # pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            NIL operation; # list operation : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
          }
          {
            # Entry point: registerName # @parameter%registerName : @storage
            # sp.verify(params.name != '') # @parameter%registerName : @storage
            DUP;        # @parameter%registerName : @parameter%registerName : @storage
            CDAR;       # string : @parameter%registerName : @storage
            PUSH string ""; # string : string : @parameter%registerName : @storage
            COMPARE;    # int : @parameter%registerName : @storage
            NEQ;        # bool : @parameter%registerName : @storage
            IF
              {}
              {
                PUSH string "WrongCondition: params.name != ''"; # string : @parameter%registerName : @storage
                FAILWITH;   # FAILED
              }; # @parameter%registerName : @storage
            # sp.verify(~ ((self.data.nameRegistry.contains(params.name)) & (~ (sp.now > sp.add_seconds(self.data.nameRegistry[params.name].registeredAt, self.data.nameRegistry[params.name].registrationPeriod)))), message = 'Name is currently registered') # @parameter%registerName : @storage
            SWAP;       # @storage : @parameter%registerName
            DUP;        # @storage : @storage : @parameter%registerName
            DUG 2;      # @storage : @parameter%registerName : @storage
            CDDAR;      # big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%registerName : @storage
            SWAP;       # @parameter%registerName : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @storage
            DUP;        # @parameter%registerName : @parameter%registerName : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @storage
            DUG 2;      # @parameter%registerName : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%registerName : @storage
            CDAR;       # string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%registerName : @storage
            MEM;        # bool : @parameter%registerName : @storage
            IF
              {
                SWAP;       # @storage : @parameter%registerName
                DUP;        # @storage : @storage : @parameter%registerName
                DUG 2;      # @storage : @parameter%registerName : @storage
                CDDAR;      # big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%registerName : @storage
                SWAP;       # @parameter%registerName : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @storage
                DUP;        # @parameter%registerName : @parameter%registerName : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @storage
                DUG 2;      # @parameter%registerName : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%registerName : @storage
                CDAR;       # string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%registerName : @storage
                GET;        # option (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%registerName : @storage
                IF_SOME
                  {
                    # of_some: Get-item:29 # @some : @parameter%registerName : @storage
                  }
                  {
                    PUSH string "Get-item:29"; # string : @parameter%registerName : @storage
                    FAILWITH;   # FAILED
                  }; # @some : @parameter%registerName : @storage
                CDAR;       # timestamp : @parameter%registerName : @storage
                DIG 2;      # @storage : timestamp : @parameter%registerName
                DUP;        # @storage : @storage : timestamp : @parameter%registerName
                DUG 3;      # @storage : timestamp : @parameter%registerName : @storage
                CDDAR;      # big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : timestamp : @parameter%registerName : @storage
                DIG 2;      # @parameter%registerName : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : timestamp : @storage
                DUP;        # @parameter%registerName : @parameter%registerName : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : timestamp : @storage
                DUG 3;      # @parameter%registerName : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : timestamp : @parameter%registerName : @storage
                CDAR;       # string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : timestamp : @parameter%registerName : @storage
                GET;        # option (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : timestamp : @parameter%registerName : @storage
                IF_SOME
                  {
                    # of_some: Get-item:29 # @some : timestamp : @parameter%registerName : @storage
                  }
                  {
                    PUSH string "Get-item:29"; # string : timestamp : @parameter%registerName : @storage
                    FAILWITH;   # FAILED
                  }; # @some : timestamp : @parameter%registerName : @storage
                CDDAR;      # int : timestamp : @parameter%registerName : @storage
                ADD;        # timestamp : @parameter%registerName : @storage
                NOW;        # timestamp : timestamp : @parameter%registerName : @storage
                COMPARE;    # int : @parameter%registerName : @storage
                GT;         # bool : @parameter%registerName : @storage
                NOT;        # bool : @parameter%registerName : @storage
              }
              {
                PUSH bool False; # bool : @parameter%registerName : @storage
              }; # bool : @parameter%registerName : @storage
            IF
              {
                PUSH string "Name is currently registered"; # string : @parameter%registerName : @storage
                FAILWITH;   # FAILED
              }
              {}; # @parameter%registerName : @storage
            # sp.verify(params.duration < self.data.maxDuration, message = 'Duration too long') # @parameter%registerName : @storage
            SWAP;       # @storage : @parameter%registerName
            DUP;        # @storage : @storage : @parameter%registerName
            DUG 2;      # @storage : @parameter%registerName : @storage
            CDAR;       # int : @parameter%registerName : @storage
            SWAP;       # @parameter%registerName : int : @storage
            DUP;        # @parameter%registerName : @parameter%registerName : int : @storage
            DUG 2;      # @parameter%registerName : int : @parameter%registerName : @storage
            CAR;        # int : int : @parameter%registerName : @storage
            COMPARE;    # int : @parameter%registerName : @storage
            LT;         # bool : @parameter%registerName : @storage
            IF
              {}
              {
                PUSH string "Duration too long"; # string : @parameter%registerName : @storage
                FAILWITH;   # FAILED
              }; # @parameter%registerName : @storage
            # cost = sp.local("cost", sp.tez(0), sp.TMutez) # @parameter%registerName : @storage
            PUSH mutez 0; # mutez : @parameter%registerName : @storage
            # sp.verify(sp.split_tokens(self.data.price, sp.as_nat(params.duration) // sp.as_nat(self.data.interval), 1) <= sp.amount, message = 'Insufficient payment') # mutez : @parameter%registerName : @storage
            AMOUNT;     # mutez : mutez : @parameter%registerName : @storage
            DIG 3;      # @storage : mutez : mutez : @parameter%registerName
            DUP;        # @storage : @storage : mutez : mutez : @parameter%registerName
            DUG 4;      # @storage : mutez : mutez : @parameter%registerName : @storage
            CDDDR;      # mutez : mutez : mutez : @parameter%registerName : @storage
            DIG 4;      # @storage : mutez : mutez : mutez : @parameter%registerName
            DUP;        # @storage : @storage : mutez : mutez : mutez : @parameter%registerName
            DUG 5;      # @storage : mutez : mutez : mutez : @parameter%registerName : @storage
            CADDR;      # int : mutez : mutez : mutez : @parameter%registerName : @storage
            ISNAT;      # option nat : mutez : mutez : mutez : @parameter%registerName : @storage
            IF_SOME
              {}
              {
                PUSH unit Unit; # unit : mutez : mutez : mutez : @parameter%registerName : @storage
                FAILWITH;   # FAILED
              }; # @some : mutez : mutez : mutez : @parameter%registerName : @storage
            DIG 4;      # @parameter%registerName : @some : mutez : mutez : mutez : @storage
            DUP;        # @parameter%registerName : @parameter%registerName : @some : mutez : mutez : mutez : @storage
            DUG 5;      # @parameter%registerName : @some : mutez : mutez : mutez : @parameter%registerName : @storage
            CAR;        # int : @some : mutez : mutez : mutez : @parameter%registerName : @storage
            ISNAT;      # option nat : @some : mutez : mutez : mutez : @parameter%registerName : @storage
            IF_SOME
              {}
              {
                PUSH unit Unit; # unit : @some : mutez : mutez : mutez : @parameter%registerName : @storage
                FAILWITH;   # FAILED
              }; # @some : @some : mutez : mutez : mutez : @parameter%registerName : @storage
            EDIV;       # option (pair nat nat) : mutez : mutez : mutez : @parameter%registerName : @storage
            IF_SOME
              {
                CAR;        # nat : mutez : mutez : mutez : @parameter%registerName : @storage
              }
              {
                PUSH string "division by zero"; # string : mutez : mutez : mutez : @parameter%registerName : @storage
                FAILWITH;   # FAILED
              }; # nat : mutez : mutez : mutez : @parameter%registerName : @storage
            MUL;        # mutez : mutez : mutez : @parameter%registerName : @storage
            COMPARE;    # int : mutez : @parameter%registerName : @storage
            LE;         # bool : mutez : @parameter%registerName : @storage
            IF
              {}
              {
                PUSH string "Insufficient payment"; # string : mutez : @parameter%registerName : @storage
                FAILWITH;   # FAILED
              }; # mutez : @parameter%registerName : @storage
            # cost.value = sp.split_tokens(self.data.price, sp.as_nat(params.duration) // sp.as_nat(self.data.interval), 1) # mutez : @parameter%registerName : @storage
            DIG 2;      # @storage : mutez : @parameter%registerName
            DUP;        # @storage : @storage : mutez : @parameter%registerName
            DUG 3;      # @storage : mutez : @parameter%registerName : @storage
            CDDDR;      # mutez : mutez : @parameter%registerName : @storage
            DIG 3;      # @storage : mutez : mutez : @parameter%registerName
            DUP;        # @storage : @storage : mutez : mutez : @parameter%registerName
            DUG 4;      # @storage : mutez : mutez : @parameter%registerName : @storage
            CADDR;      # int : mutez : mutez : @parameter%registerName : @storage
            ISNAT;      # option nat : mutez : mutez : @parameter%registerName : @storage
            IF_SOME
              {}
              {
                PUSH unit Unit; # unit : mutez : mutez : @parameter%registerName : @storage
                FAILWITH;   # FAILED
              }; # @some : mutez : mutez : @parameter%registerName : @storage
            DIG 3;      # @parameter%registerName : @some : mutez : mutez : @storage
            DUP;        # @parameter%registerName : @parameter%registerName : @some : mutez : mutez : @storage
            DUG 4;      # @parameter%registerName : @some : mutez : mutez : @parameter%registerName : @storage
            CAR;        # int : @some : mutez : mutez : @parameter%registerName : @storage
            ISNAT;      # option nat : @some : mutez : mutez : @parameter%registerName : @storage
            IF_SOME
              {}
              {
                PUSH unit Unit; # unit : @some : mutez : mutez : @parameter%registerName : @storage
                FAILWITH;   # FAILED
              }; # @some : @some : mutez : mutez : @parameter%registerName : @storage
            EDIV;       # option (pair nat nat) : mutez : mutez : @parameter%registerName : @storage
            IF_SOME
              {
                CAR;        # nat : mutez : mutez : @parameter%registerName : @storage
              }
              {
                PUSH string "division by zero"; # string : mutez : mutez : @parameter%registerName : @storage
                FAILWITH;   # FAILED
              }; # nat : mutez : mutez : @parameter%registerName : @storage
            MUL;        # mutez : mutez : @parameter%registerName : @storage
            SWAP;       # mutez : mutez : @parameter%registerName : @storage
            DROP;       # mutez : @parameter%registerName : @storage
            # self.data.nameRegistry[params.name] = sp.record(modified = False, name = params.name, owner = sp.sender, registeredAt = sp.now, registrationPeriod = params.duration, resolver = params.resolver) # mutez : @parameter%registerName : @storage
            DIG 2;      # @storage : mutez : @parameter%registerName
            DUP;        # @storage : @storage : mutez : @parameter%registerName
            DUG 3;      # @storage : mutez : @parameter%registerName : @storage
            DUP;        # @storage : @storage : mutez : @parameter%registerName : @storage
            CAR;        # pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @storage : mutez : @parameter%registerName : @storage
            SWAP;       # @storage : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%registerName : @storage
            CDR;        # pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%registerName : @storage
            DUP;        # pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%registerName : @storage
            CAR;        # int : pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%registerName : @storage
            SWAP;       # pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%registerName : @storage
            CDR;        # pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price) : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%registerName : @storage
            DUP;        # pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price) : pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price) : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%registerName : @storage
            CDR;        # mutez : pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price) : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%registerName : @storage
            SWAP;       # pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%registerName : @storage
            CAR;        # big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%registerName : @storage
            DIG 5;      # @parameter%registerName : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @storage
            DUP;        # @parameter%registerName : @parameter%registerName : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @storage
            DUG 6;      # @parameter%registerName : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%registerName : @storage
            CDDR;       # address : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%registerName : @storage
            DIG 6;      # @parameter%registerName : address : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @storage
            DUP;        # @parameter%registerName : @parameter%registerName : address : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @storage
            DUG 7;      # @parameter%registerName : address : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%registerName : @storage
            CAR;        # int : address : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%registerName : @storage
            PAIR %registrationPeriod %resolver; # pair (int %registrationPeriod) (address %resolver) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%registerName : @storage
            NOW;        # timestamp : pair (int %registrationPeriod) (address %resolver) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%registerName : @storage
            PAIR %registeredAt; # pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%registerName : @storage
            SENDER;     # address : pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%registerName : @storage
            DIG 7;      # @parameter%registerName : address : pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @storage
            DUP;        # @parameter%registerName : @parameter%registerName : address : pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @storage
            DUG 8;      # @parameter%registerName : address : pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%registerName : @storage
            CDAR;       # string : address : pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%registerName : @storage
            PAIR %name %owner; # pair (string %name) (address %owner) : pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%registerName : @storage
            PUSH bool False; # bool : pair (string %name) (address %owner) : pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%registerName : @storage
            PAIR %modified; # pair (bool %modified) (pair (string %name) (address %owner)) : pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%registerName : @storage
            PAIR;       # pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%registerName : @storage
            SOME;       # option (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%registerName : @storage
            DIG 6;      # @parameter%registerName : option (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @storage
            DUP;        # @parameter%registerName : @parameter%registerName : option (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @storage
            DUG 7;      # @parameter%registerName : option (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%registerName : @storage
            CDAR;       # string : option (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%registerName : @storage
            UPDATE;     # big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%registerName : @storage
            PAIR;       # pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%registerName : @storage
            SWAP;       # int : pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%registerName : @storage
            PAIR;       # pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez) : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%registerName : @storage
            SWAP;       # pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez) : mutez : @parameter%registerName : @storage
            PAIR;       # pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez)) : mutez : @parameter%registerName : @storage
            DUG 3;      # mutez : @parameter%registerName : @storage : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            DIG 2;      # @storage : mutez : @parameter%registerName : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            DROP;       # mutez : @parameter%registerName : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            # self.data.addressRegistry[params.resolver] = params.name # mutez : @parameter%registerName : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            DIG 2;      # pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez)) : mutez : @parameter%registerName
            DUP;        # pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez)) : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez)) : mutez : @parameter%registerName
            DUG 3;      # pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez)) : mutez : @parameter%registerName : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            DUP;        # pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez)) : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez)) : mutez : @parameter%registerName : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            CDR;        # pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez) : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez)) : mutez : @parameter%registerName : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            SWAP;       # pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez)) : pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez) : mutez : @parameter%registerName : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            CAR;        # pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez) : mutez : @parameter%registerName : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            DUP;        # pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez) : mutez : @parameter%registerName : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            CDR;        # pair (address %domainManager) (int %interval) : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez) : mutez : @parameter%registerName : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            SWAP;       # pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : pair (address %domainManager) (int %interval) : pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez) : mutez : @parameter%registerName : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            CAR;        # big_map address string : pair (address %domainManager) (int %interval) : pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez) : mutez : @parameter%registerName : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            DIG 4;      # @parameter%registerName : big_map address string : pair (address %domainManager) (int %interval) : pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez) : mutez : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            DUP;        # @parameter%registerName : @parameter%registerName : big_map address string : pair (address %domainManager) (int %interval) : pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez) : mutez : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            DUG 5;      # @parameter%registerName : big_map address string : pair (address %domainManager) (int %interval) : pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez) : mutez : @parameter%registerName : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            CDAR;       # string : big_map address string : pair (address %domainManager) (int %interval) : pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez) : mutez : @parameter%registerName : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            SOME;       # option string : big_map address string : pair (address %domainManager) (int %interval) : pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez) : mutez : @parameter%registerName : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            DIG 5;      # @parameter%registerName : option string : big_map address string : pair (address %domainManager) (int %interval) : pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez) : mutez : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            DUP;        # @parameter%registerName : @parameter%registerName : option string : big_map address string : pair (address %domainManager) (int %interval) : pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez) : mutez : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            DUG 6;      # @parameter%registerName : option string : big_map address string : pair (address %domainManager) (int %interval) : pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez) : mutez : @parameter%registerName : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            CDDR;       # address : option string : big_map address string : pair (address %domainManager) (int %interval) : pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez) : mutez : @parameter%registerName : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            UPDATE;     # big_map address string : pair (address %domainManager) (int %interval) : pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez) : mutez : @parameter%registerName : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            PAIR;       # pair (big_map address string) (pair (address %domainManager) (int %interval)) : pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez) : mutez : @parameter%registerName : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            PAIR;       # pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez)) : mutez : @parameter%registerName : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            DUG 3;      # mutez : @parameter%registerName : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez)) : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            DIG 2;      # pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez)) : mutez : @parameter%registerName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            DROP;       # mutez : @parameter%registerName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            # if cost.value < sp.amount: # mutez : @parameter%registerName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            DUP;        # mutez : mutez : @parameter%registerName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            AMOUNT;     # mutez : mutez : mutez : @parameter%registerName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            COMPARE;    # int : mutez : @parameter%registerName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            GT;         # bool : mutez : @parameter%registerName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            IF
              {
                # sp.send(sp.sender, sp.amount - cost.value) # mutez : @parameter%registerName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
                NIL operation; # list operation : mutez : @parameter%registerName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
                SENDER;     # address : list operation : mutez : @parameter%registerName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
                CONTRACT unit; # option (contract unit) : list operation : mutez : @parameter%registerName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit : list operation : mutez : @parameter%registerName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
                    FAILWITH;   # FAILED
                  }; # @some : list operation : mutez : @parameter%registerName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
                DIG 2;      # mutez : @some : list operation : @parameter%registerName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
                DUP;        # mutez : mutez : @some : list operation : @parameter%registerName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
                DUG 3;      # mutez : @some : list operation : mutez : @parameter%registerName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
                AMOUNT;     # mutez : mutez : @some : list operation : mutez : @parameter%registerName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
                SUB;        # mutez : @some : list operation : mutez : @parameter%registerName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
                PUSH unit Unit; # unit : mutez : @some : list operation : mutez : @parameter%registerName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
                TRANSFER_TOKENS; # operation : list operation : mutez : @parameter%registerName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
                CONS;       # list operation : mutez : @parameter%registerName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
              }
              {
                NIL operation; # list operation : mutez : @parameter%registerName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
              }; # list operation : mutez : @parameter%registerName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            SWAP;       # mutez : list operation : @parameter%registerName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            DROP;       # list operation : @parameter%registerName : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            SWAP;       # @parameter%registerName : list operation : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            DROP;       # list operation : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
          }; # list operation : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
      }
      {
        IF_LEFT
          {
            # Entry point: transferNameOwnership # @parameter%transferNameOwnership : @storage
            # sp.verify(self.data.nameRegistry.contains(params.name), message = 'Name not registered') # @parameter%transferNameOwnership : @storage
            SWAP;       # @storage : @parameter%transferNameOwnership
            DUP;        # @storage : @storage : @parameter%transferNameOwnership
            DUG 2;      # @storage : @parameter%transferNameOwnership : @storage
            CDDAR;      # big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%transferNameOwnership : @storage
            SWAP;       # @parameter%transferNameOwnership : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @storage
            DUP;        # @parameter%transferNameOwnership : @parameter%transferNameOwnership : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @storage
            DUG 2;      # @parameter%transferNameOwnership : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%transferNameOwnership : @storage
            CAR;        # string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%transferNameOwnership : @storage
            MEM;        # bool : @parameter%transferNameOwnership : @storage
            IF
              {}
              {
                PUSH string "Name not registered"; # string : @parameter%transferNameOwnership : @storage
                FAILWITH;   # FAILED
              }; # @parameter%transferNameOwnership : @storage
            # sp.verify(~ (sp.now > sp.add_seconds(self.data.nameRegistry[params.name].registeredAt, self.data.nameRegistry[params.name].registrationPeriod)), message = 'Name registration has expired') # @parameter%transferNameOwnership : @storage
            SWAP;       # @storage : @parameter%transferNameOwnership
            DUP;        # @storage : @storage : @parameter%transferNameOwnership
            DUG 2;      # @storage : @parameter%transferNameOwnership : @storage
            CDDAR;      # big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%transferNameOwnership : @storage
            SWAP;       # @parameter%transferNameOwnership : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @storage
            DUP;        # @parameter%transferNameOwnership : @parameter%transferNameOwnership : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @storage
            DUG 2;      # @parameter%transferNameOwnership : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%transferNameOwnership : @storage
            CAR;        # string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%transferNameOwnership : @storage
            GET;        # option (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%transferNameOwnership : @storage
            IF_SOME
              {
                # of_some: Get-item:72 # @some : @parameter%transferNameOwnership : @storage
              }
              {
                PUSH string "Get-item:72"; # string : @parameter%transferNameOwnership : @storage
                FAILWITH;   # FAILED
              }; # @some : @parameter%transferNameOwnership : @storage
            CDAR;       # timestamp : @parameter%transferNameOwnership : @storage
            DIG 2;      # @storage : timestamp : @parameter%transferNameOwnership
            DUP;        # @storage : @storage : timestamp : @parameter%transferNameOwnership
            DUG 3;      # @storage : timestamp : @parameter%transferNameOwnership : @storage
            CDDAR;      # big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : timestamp : @parameter%transferNameOwnership : @storage
            DIG 2;      # @parameter%transferNameOwnership : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : timestamp : @storage
            DUP;        # @parameter%transferNameOwnership : @parameter%transferNameOwnership : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : timestamp : @storage
            DUG 3;      # @parameter%transferNameOwnership : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : timestamp : @parameter%transferNameOwnership : @storage
            CAR;        # string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : timestamp : @parameter%transferNameOwnership : @storage
            GET;        # option (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : timestamp : @parameter%transferNameOwnership : @storage
            IF_SOME
              {
                # of_some: Get-item:72 # @some : timestamp : @parameter%transferNameOwnership : @storage
              }
              {
                PUSH string "Get-item:72"; # string : timestamp : @parameter%transferNameOwnership : @storage
                FAILWITH;   # FAILED
              }; # @some : timestamp : @parameter%transferNameOwnership : @storage
            CDDAR;      # int : timestamp : @parameter%transferNameOwnership : @storage
            ADD;        # timestamp : @parameter%transferNameOwnership : @storage
            NOW;        # timestamp : timestamp : @parameter%transferNameOwnership : @storage
            COMPARE;    # int : @parameter%transferNameOwnership : @storage
            GT;         # bool : @parameter%transferNameOwnership : @storage
            IF
              {
                PUSH string "Name registration has expired"; # string : @parameter%transferNameOwnership : @storage
                FAILWITH;   # FAILED
              }
              {}; # @parameter%transferNameOwnership : @storage
            # sp.verify((sp.sender == self.data.nameRegistry[params.name].owner) | (sp.sender == self.data.domainManager), message = 'Invalid permissions') # @parameter%transferNameOwnership : @storage
            SWAP;       # @storage : @parameter%transferNameOwnership
            DUP;        # @storage : @storage : @parameter%transferNameOwnership
            DUG 2;      # @storage : @parameter%transferNameOwnership : @storage
            CDDAR;      # big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%transferNameOwnership : @storage
            SWAP;       # @parameter%transferNameOwnership : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @storage
            DUP;        # @parameter%transferNameOwnership : @parameter%transferNameOwnership : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @storage
            DUG 2;      # @parameter%transferNameOwnership : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%transferNameOwnership : @storage
            CAR;        # string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%transferNameOwnership : @storage
            GET;        # option (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%transferNameOwnership : @storage
            IF_SOME
              {
                # of_some: Get-item:72 # @some : @parameter%transferNameOwnership : @storage
              }
              {
                PUSH string "Get-item:72"; # string : @parameter%transferNameOwnership : @storage
                FAILWITH;   # FAILED
              }; # @some : @parameter%transferNameOwnership : @storage
            CADDR;      # address : @parameter%transferNameOwnership : @storage
            SENDER;     # address : address : @parameter%transferNameOwnership : @storage
            COMPARE;    # int : @parameter%transferNameOwnership : @storage
            EQ;         # bool : @parameter%transferNameOwnership : @storage
            IF
              {
                PUSH bool True; # bool : @parameter%transferNameOwnership : @storage
              }
              {
                SWAP;       # @storage : @parameter%transferNameOwnership
                DUP;        # @storage : @storage : @parameter%transferNameOwnership
                DUG 2;      # @storage : @parameter%transferNameOwnership : @storage
                CADAR;      # address : @parameter%transferNameOwnership : @storage
                SENDER;     # address : address : @parameter%transferNameOwnership : @storage
                COMPARE;    # int : @parameter%transferNameOwnership : @storage
                EQ;         # bool : @parameter%transferNameOwnership : @storage
              }; # bool : @parameter%transferNameOwnership : @storage
            IF
              {}
              {
                PUSH string "Invalid permissions"; # string : @parameter%transferNameOwnership : @storage
                FAILWITH;   # FAILED
              }; # @parameter%transferNameOwnership : @storage
            # self.data.nameRegistry[params.name].owner = params.newNameOwner # @parameter%transferNameOwnership : @storage
            SWAP;       # @storage : @parameter%transferNameOwnership
            DUP;        # @storage : @storage : @parameter%transferNameOwnership
            DUG 2;      # @storage : @parameter%transferNameOwnership : @storage
            DUP;        # @storage : @storage : @parameter%transferNameOwnership : @storage
            CAR;        # pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @storage : @parameter%transferNameOwnership : @storage
            SWAP;       # @storage : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : @storage
            CDR;        # pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : @storage
            DUP;        # pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : @storage
            CAR;        # int : pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : @storage
            SWAP;       # pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : @storage
            CDR;        # pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price) : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : @storage
            DUP;        # pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price) : pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price) : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : @storage
            CDR;        # mutez : pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price) : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : @storage
            SWAP;       # pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : @storage
            CAR;        # big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : @storage
            DUP;        # big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : @storage
            DIG 5;      # @parameter%transferNameOwnership : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @storage
            DUP;        # @parameter%transferNameOwnership : @parameter%transferNameOwnership : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @storage
            DUG 6;      # @parameter%transferNameOwnership : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : @storage
            CAR;        # string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : @storage
            DUP;        # string : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : @storage
            DUG 2;      # string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : @storage
            GET;        # option (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : @storage
            IF_SOME
              {
                # of_some: set_in_top-any # @some : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : @storage
              }
              {
                PUSH string "set_in_top-any"; # string : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : @storage
                FAILWITH;   # FAILED
              }; # @some : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : @storage
            DUP;        # @some : @some : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : @storage
            CDR;        # pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)) : @some : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : @storage
            SWAP;       # @some : pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : @storage
            CAR;        # pair (bool %modified) (pair (string %name) (address %owner)) : pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : @storage
            DUP;        # pair (bool %modified) (pair (string %name) (address %owner)) : pair (bool %modified) (pair (string %name) (address %owner)) : pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : @storage
            CAR;        # bool : pair (bool %modified) (pair (string %name) (address %owner)) : pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : @storage
            SWAP;       # pair (bool %modified) (pair (string %name) (address %owner)) : bool : pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : @storage
            CDAR;       # string : bool : pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : @storage
            DIG 8;      # @parameter%transferNameOwnership : string : bool : pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @storage
            DUP;        # @parameter%transferNameOwnership : @parameter%transferNameOwnership : string : bool : pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @storage
            DUG 9;      # @parameter%transferNameOwnership : string : bool : pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : @storage
            CDR;        # address : string : bool : pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : @storage
            SWAP;       # string : address : bool : pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : @storage
            PAIR;       # pair string address : bool : pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : @storage
            SWAP;       # bool : pair string address : pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : @storage
            PAIR;       # pair bool (pair string address) : pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : @storage
            PAIR;       # pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : @storage
            SOME;       # option (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : @storage
            SWAP;       # string : option (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : @storage
            UPDATE;     # big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : @storage
            PAIR;       # pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : @storage
            SWAP;       # int : pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : @storage
            PAIR;       # pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez) : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : @storage
            SWAP;       # pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez) : @parameter%transferNameOwnership : @storage
            PAIR;       # pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez)) : @parameter%transferNameOwnership : @storage
            DUG 2;      # @parameter%transferNameOwnership : @storage : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            SWAP;       # @storage : @parameter%transferNameOwnership : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            DROP;       # @parameter%transferNameOwnership : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            # self.data.nameRegistry[params.name].modified = True # @parameter%transferNameOwnership : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            SWAP;       # pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez)) : @parameter%transferNameOwnership
            DUP;        # pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez)) : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez)) : @parameter%transferNameOwnership
            DUG 2;      # pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez)) : @parameter%transferNameOwnership : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            DUP;        # pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez)) : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez)) : @parameter%transferNameOwnership : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            CAR;        # pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez)) : @parameter%transferNameOwnership : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            SWAP;       # pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez)) : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            CDR;        # pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez) : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            DUP;        # pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez) : pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez) : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            CAR;        # int : pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez) : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            SWAP;       # pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez) : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            CDR;        # pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            DUP;        # pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez : pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            CDR;        # mutez : pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            SWAP;       # pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            CAR;        # big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            DUP;        # big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            DIG 5;      # @parameter%transferNameOwnership : big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            DUP;        # @parameter%transferNameOwnership : @parameter%transferNameOwnership : big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            DUG 6;      # @parameter%transferNameOwnership : big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            CAR;        # string : big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            DUP;        # string : string : big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            DUG 2;      # string : big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : string : big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            GET;        # option (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : string : big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            IF_SOME
              {
                # of_some: set_in_top-any # @some : string : big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
              }
              {
                PUSH string "set_in_top-any"; # string : string : big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
                FAILWITH;   # FAILED
              }; # @some : string : big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            DUP;        # @some : @some : string : big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            CDR;        # pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)) : @some : string : big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            SWAP;       # @some : pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)) : string : big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            CADR;       # pair string address : pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)) : string : big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            PUSH bool True; # bool : pair string address : pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)) : string : big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            PAIR;       # pair bool (pair string address) : pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)) : string : big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            PAIR;       # pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))) : string : big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            SOME;       # option (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : string : big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            SWAP;       # string : option (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            UPDATE;     # big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            PAIR;       # pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            SWAP;       # int : pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            PAIR;       # pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez) : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%transferNameOwnership : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            SWAP;       # pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez) : @parameter%transferNameOwnership : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            PAIR;       # pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez)) : @parameter%transferNameOwnership : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            DUG 2;      # @parameter%transferNameOwnership : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez)) : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            DROP;       # pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez)) : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            DROP;       # pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
            NIL operation; # list operation : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
          }
          {
            IF_LEFT
              {
                # Entry point: updateRegistrationPeriod # @parameter%updateRegistrationPeriod : @storage
                # sp.verify(self.data.nameRegistry.contains(params.name), message = 'Name not registered') # @parameter%updateRegistrationPeriod : @storage
                SWAP;       # @storage : @parameter%updateRegistrationPeriod
                DUP;        # @storage : @storage : @parameter%updateRegistrationPeriod
                DUG 2;      # @storage : @parameter%updateRegistrationPeriod : @storage
                CDDAR;      # big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%updateRegistrationPeriod : @storage
                SWAP;       # @parameter%updateRegistrationPeriod : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @storage
                DUP;        # @parameter%updateRegistrationPeriod : @parameter%updateRegistrationPeriod : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @storage
                DUG 2;      # @parameter%updateRegistrationPeriod : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%updateRegistrationPeriod : @storage
                CDR;        # string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%updateRegistrationPeriod : @storage
                MEM;        # bool : @parameter%updateRegistrationPeriod : @storage
                IF
                  {}
                  {
                    PUSH string "Name not registered"; # string : @parameter%updateRegistrationPeriod : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%updateRegistrationPeriod : @storage
                # sp.verify(~ (sp.now > sp.add_seconds(self.data.nameRegistry[params.name].registeredAt, self.data.nameRegistry[params.name].registrationPeriod)), message = 'Name registration has expired') # @parameter%updateRegistrationPeriod : @storage
                SWAP;       # @storage : @parameter%updateRegistrationPeriod
                DUP;        # @storage : @storage : @parameter%updateRegistrationPeriod
                DUG 2;      # @storage : @parameter%updateRegistrationPeriod : @storage
                CDDAR;      # big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%updateRegistrationPeriod : @storage
                SWAP;       # @parameter%updateRegistrationPeriod : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @storage
                DUP;        # @parameter%updateRegistrationPeriod : @parameter%updateRegistrationPeriod : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @storage
                DUG 2;      # @parameter%updateRegistrationPeriod : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%updateRegistrationPeriod : @storage
                CDR;        # string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%updateRegistrationPeriod : @storage
                GET;        # option (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%updateRegistrationPeriod : @storage
                IF_SOME
                  {
                    # of_some: Get-item:54 # @some : @parameter%updateRegistrationPeriod : @storage
                  }
                  {
                    PUSH string "Get-item:54"; # string : @parameter%updateRegistrationPeriod : @storage
                    FAILWITH;   # FAILED
                  }; # @some : @parameter%updateRegistrationPeriod : @storage
                CDAR;       # timestamp : @parameter%updateRegistrationPeriod : @storage
                DIG 2;      # @storage : timestamp : @parameter%updateRegistrationPeriod
                DUP;        # @storage : @storage : timestamp : @parameter%updateRegistrationPeriod
                DUG 3;      # @storage : timestamp : @parameter%updateRegistrationPeriod : @storage
                CDDAR;      # big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : timestamp : @parameter%updateRegistrationPeriod : @storage
                DIG 2;      # @parameter%updateRegistrationPeriod : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : timestamp : @storage
                DUP;        # @parameter%updateRegistrationPeriod : @parameter%updateRegistrationPeriod : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : timestamp : @storage
                DUG 3;      # @parameter%updateRegistrationPeriod : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : timestamp : @parameter%updateRegistrationPeriod : @storage
                CDR;        # string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : timestamp : @parameter%updateRegistrationPeriod : @storage
                GET;        # option (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : timestamp : @parameter%updateRegistrationPeriod : @storage
                IF_SOME
                  {
                    # of_some: Get-item:54 # @some : timestamp : @parameter%updateRegistrationPeriod : @storage
                  }
                  {
                    PUSH string "Get-item:54"; # string : timestamp : @parameter%updateRegistrationPeriod : @storage
                    FAILWITH;   # FAILED
                  }; # @some : timestamp : @parameter%updateRegistrationPeriod : @storage
                CDDAR;      # int : timestamp : @parameter%updateRegistrationPeriod : @storage
                ADD;        # timestamp : @parameter%updateRegistrationPeriod : @storage
                NOW;        # timestamp : timestamp : @parameter%updateRegistrationPeriod : @storage
                COMPARE;    # int : @parameter%updateRegistrationPeriod : @storage
                GT;         # bool : @parameter%updateRegistrationPeriod : @storage
                IF
                  {
                    PUSH string "Name registration has expired"; # string : @parameter%updateRegistrationPeriod : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @parameter%updateRegistrationPeriod : @storage
                # sp.verify((sp.sender == self.data.nameRegistry[params.name].owner) | (sp.sender == self.data.domainManager), message = 'Invalid permissions') # @parameter%updateRegistrationPeriod : @storage
                SWAP;       # @storage : @parameter%updateRegistrationPeriod
                DUP;        # @storage : @storage : @parameter%updateRegistrationPeriod
                DUG 2;      # @storage : @parameter%updateRegistrationPeriod : @storage
                CDDAR;      # big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%updateRegistrationPeriod : @storage
                SWAP;       # @parameter%updateRegistrationPeriod : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @storage
                DUP;        # @parameter%updateRegistrationPeriod : @parameter%updateRegistrationPeriod : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @storage
                DUG 2;      # @parameter%updateRegistrationPeriod : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%updateRegistrationPeriod : @storage
                CDR;        # string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%updateRegistrationPeriod : @storage
                GET;        # option (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%updateRegistrationPeriod : @storage
                IF_SOME
                  {
                    # of_some: Get-item:54 # @some : @parameter%updateRegistrationPeriod : @storage
                  }
                  {
                    PUSH string "Get-item:54"; # string : @parameter%updateRegistrationPeriod : @storage
                    FAILWITH;   # FAILED
                  }; # @some : @parameter%updateRegistrationPeriod : @storage
                CADDR;      # address : @parameter%updateRegistrationPeriod : @storage
                SENDER;     # address : address : @parameter%updateRegistrationPeriod : @storage
                COMPARE;    # int : @parameter%updateRegistrationPeriod : @storage
                EQ;         # bool : @parameter%updateRegistrationPeriod : @storage
                IF
                  {
                    PUSH bool True; # bool : @parameter%updateRegistrationPeriod : @storage
                  }
                  {
                    SWAP;       # @storage : @parameter%updateRegistrationPeriod
                    DUP;        # @storage : @storage : @parameter%updateRegistrationPeriod
                    DUG 2;      # @storage : @parameter%updateRegistrationPeriod : @storage
                    CADAR;      # address : @parameter%updateRegistrationPeriod : @storage
                    SENDER;     # address : address : @parameter%updateRegistrationPeriod : @storage
                    COMPARE;    # int : @parameter%updateRegistrationPeriod : @storage
                    EQ;         # bool : @parameter%updateRegistrationPeriod : @storage
                  }; # bool : @parameter%updateRegistrationPeriod : @storage
                IF
                  {}
                  {
                    PUSH string "Invalid permissions"; # string : @parameter%updateRegistrationPeriod : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%updateRegistrationPeriod : @storage
                # sp.verify((self.data.nameRegistry[params.name].registrationPeriod + params.duration) < self.data.maxDuration, message = 'Duration too long') # @parameter%updateRegistrationPeriod : @storage
                SWAP;       # @storage : @parameter%updateRegistrationPeriod
                DUP;        # @storage : @storage : @parameter%updateRegistrationPeriod
                DUG 2;      # @storage : @parameter%updateRegistrationPeriod : @storage
                CDAR;       # int : @parameter%updateRegistrationPeriod : @storage
                SWAP;       # @parameter%updateRegistrationPeriod : int : @storage
                DUP;        # @parameter%updateRegistrationPeriod : @parameter%updateRegistrationPeriod : int : @storage
                DUG 2;      # @parameter%updateRegistrationPeriod : int : @parameter%updateRegistrationPeriod : @storage
                CAR;        # int : int : @parameter%updateRegistrationPeriod : @storage
                DIG 3;      # @storage : int : int : @parameter%updateRegistrationPeriod
                DUP;        # @storage : @storage : int : int : @parameter%updateRegistrationPeriod
                DUG 4;      # @storage : int : int : @parameter%updateRegistrationPeriod : @storage
                CDDAR;      # big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : int : int : @parameter%updateRegistrationPeriod : @storage
                DIG 3;      # @parameter%updateRegistrationPeriod : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : int : int : @storage
                DUP;        # @parameter%updateRegistrationPeriod : @parameter%updateRegistrationPeriod : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : int : int : @storage
                DUG 4;      # @parameter%updateRegistrationPeriod : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : int : int : @parameter%updateRegistrationPeriod : @storage
                CDR;        # string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : int : int : @parameter%updateRegistrationPeriod : @storage
                GET;        # option (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : int : int : @parameter%updateRegistrationPeriod : @storage
                IF_SOME
                  {
                    # of_some: Get-item:54 # @some : int : int : @parameter%updateRegistrationPeriod : @storage
                  }
                  {
                    PUSH string "Get-item:54"; # string : int : int : @parameter%updateRegistrationPeriod : @storage
                    FAILWITH;   # FAILED
                  }; # @some : int : int : @parameter%updateRegistrationPeriod : @storage
                CDDAR;      # int : int : int : @parameter%updateRegistrationPeriod : @storage
                ADD;        # int : int : @parameter%updateRegistrationPeriod : @storage
                COMPARE;    # int : @parameter%updateRegistrationPeriod : @storage
                LT;         # bool : @parameter%updateRegistrationPeriod : @storage
                IF
                  {}
                  {
                    PUSH string "Duration too long"; # string : @parameter%updateRegistrationPeriod : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%updateRegistrationPeriod : @storage
                # cost = sp.local("cost", sp.tez(0), sp.TMutez) # @parameter%updateRegistrationPeriod : @storage
                PUSH mutez 0; # mutez : @parameter%updateRegistrationPeriod : @storage
                # sp.verify(sp.split_tokens(self.data.price, sp.as_nat(params.duration) // sp.as_nat(self.data.interval), 1) <= sp.amount, message = 'Insufficient payment') # mutez : @parameter%updateRegistrationPeriod : @storage
                AMOUNT;     # mutez : mutez : @parameter%updateRegistrationPeriod : @storage
                DIG 3;      # @storage : mutez : mutez : @parameter%updateRegistrationPeriod
                DUP;        # @storage : @storage : mutez : mutez : @parameter%updateRegistrationPeriod
                DUG 4;      # @storage : mutez : mutez : @parameter%updateRegistrationPeriod : @storage
                CDDDR;      # mutez : mutez : mutez : @parameter%updateRegistrationPeriod : @storage
                DIG 4;      # @storage : mutez : mutez : mutez : @parameter%updateRegistrationPeriod
                DUP;        # @storage : @storage : mutez : mutez : mutez : @parameter%updateRegistrationPeriod
                DUG 5;      # @storage : mutez : mutez : mutez : @parameter%updateRegistrationPeriod : @storage
                CADDR;      # int : mutez : mutez : mutez : @parameter%updateRegistrationPeriod : @storage
                ISNAT;      # option nat : mutez : mutez : mutez : @parameter%updateRegistrationPeriod : @storage
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit : mutez : mutez : mutez : @parameter%updateRegistrationPeriod : @storage
                    FAILWITH;   # FAILED
                  }; # @some : mutez : mutez : mutez : @parameter%updateRegistrationPeriod : @storage
                DIG 4;      # @parameter%updateRegistrationPeriod : @some : mutez : mutez : mutez : @storage
                DUP;        # @parameter%updateRegistrationPeriod : @parameter%updateRegistrationPeriod : @some : mutez : mutez : mutez : @storage
                DUG 5;      # @parameter%updateRegistrationPeriod : @some : mutez : mutez : mutez : @parameter%updateRegistrationPeriod : @storage
                CAR;        # int : @some : mutez : mutez : mutez : @parameter%updateRegistrationPeriod : @storage
                ISNAT;      # option nat : @some : mutez : mutez : mutez : @parameter%updateRegistrationPeriod : @storage
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit : @some : mutez : mutez : mutez : @parameter%updateRegistrationPeriod : @storage
                    FAILWITH;   # FAILED
                  }; # @some : @some : mutez : mutez : mutez : @parameter%updateRegistrationPeriod : @storage
                EDIV;       # option (pair nat nat) : mutez : mutez : mutez : @parameter%updateRegistrationPeriod : @storage
                IF_SOME
                  {
                    CAR;        # nat : mutez : mutez : mutez : @parameter%updateRegistrationPeriod : @storage
                  }
                  {
                    PUSH string "division by zero"; # string : mutez : mutez : mutez : @parameter%updateRegistrationPeriod : @storage
                    FAILWITH;   # FAILED
                  }; # nat : mutez : mutez : mutez : @parameter%updateRegistrationPeriod : @storage
                MUL;        # mutez : mutez : mutez : @parameter%updateRegistrationPeriod : @storage
                COMPARE;    # int : mutez : @parameter%updateRegistrationPeriod : @storage
                LE;         # bool : mutez : @parameter%updateRegistrationPeriod : @storage
                IF
                  {}
                  {
                    PUSH string "Insufficient payment"; # string : mutez : @parameter%updateRegistrationPeriod : @storage
                    FAILWITH;   # FAILED
                  }; # mutez : @parameter%updateRegistrationPeriod : @storage
                # cost.value = sp.split_tokens(self.data.price, sp.as_nat(params.duration) // sp.as_nat(self.data.interval), 1) # mutez : @parameter%updateRegistrationPeriod : @storage
                DIG 2;      # @storage : mutez : @parameter%updateRegistrationPeriod
                DUP;        # @storage : @storage : mutez : @parameter%updateRegistrationPeriod
                DUG 3;      # @storage : mutez : @parameter%updateRegistrationPeriod : @storage
                CDDDR;      # mutez : mutez : @parameter%updateRegistrationPeriod : @storage
                DIG 3;      # @storage : mutez : mutez : @parameter%updateRegistrationPeriod
                DUP;        # @storage : @storage : mutez : mutez : @parameter%updateRegistrationPeriod
                DUG 4;      # @storage : mutez : mutez : @parameter%updateRegistrationPeriod : @storage
                CADDR;      # int : mutez : mutez : @parameter%updateRegistrationPeriod : @storage
                ISNAT;      # option nat : mutez : mutez : @parameter%updateRegistrationPeriod : @storage
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit : mutez : mutez : @parameter%updateRegistrationPeriod : @storage
                    FAILWITH;   # FAILED
                  }; # @some : mutez : mutez : @parameter%updateRegistrationPeriod : @storage
                DIG 3;      # @parameter%updateRegistrationPeriod : @some : mutez : mutez : @storage
                DUP;        # @parameter%updateRegistrationPeriod : @parameter%updateRegistrationPeriod : @some : mutez : mutez : @storage
                DUG 4;      # @parameter%updateRegistrationPeriod : @some : mutez : mutez : @parameter%updateRegistrationPeriod : @storage
                CAR;        # int : @some : mutez : mutez : @parameter%updateRegistrationPeriod : @storage
                ISNAT;      # option nat : @some : mutez : mutez : @parameter%updateRegistrationPeriod : @storage
                IF_SOME
                  {}
                  {
                    PUSH unit Unit; # unit : @some : mutez : mutez : @parameter%updateRegistrationPeriod : @storage
                    FAILWITH;   # FAILED
                  }; # @some : @some : mutez : mutez : @parameter%updateRegistrationPeriod : @storage
                EDIV;       # option (pair nat nat) : mutez : mutez : @parameter%updateRegistrationPeriod : @storage
                IF_SOME
                  {
                    CAR;        # nat : mutez : mutez : @parameter%updateRegistrationPeriod : @storage
                  }
                  {
                    PUSH string "division by zero"; # string : mutez : mutez : @parameter%updateRegistrationPeriod : @storage
                    FAILWITH;   # FAILED
                  }; # nat : mutez : mutez : @parameter%updateRegistrationPeriod : @storage
                MUL;        # mutez : mutez : @parameter%updateRegistrationPeriod : @storage
                SWAP;       # mutez : mutez : @parameter%updateRegistrationPeriod : @storage
                DROP;       # mutez : @parameter%updateRegistrationPeriod : @storage
                # self.data.nameRegistry[params.name].registrationPeriod = params.duration # mutez : @parameter%updateRegistrationPeriod : @storage
                DIG 2;      # @storage : mutez : @parameter%updateRegistrationPeriod
                DUP;        # @storage : @storage : mutez : @parameter%updateRegistrationPeriod
                DUG 3;      # @storage : mutez : @parameter%updateRegistrationPeriod : @storage
                DUP;        # @storage : @storage : mutez : @parameter%updateRegistrationPeriod : @storage
                CAR;        # pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @storage : mutez : @parameter%updateRegistrationPeriod : @storage
                SWAP;       # @storage : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : @storage
                CDR;        # pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : @storage
                DUP;        # pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : @storage
                CAR;        # int : pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : @storage
                SWAP;       # pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : @storage
                CDR;        # pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price) : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : @storage
                DUP;        # pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price) : pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price) : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : @storage
                CDR;        # mutez : pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price) : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : @storage
                SWAP;       # pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : @storage
                CAR;        # big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : @storage
                DUP;        # big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : @storage
                DIG 6;      # @parameter%updateRegistrationPeriod : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @storage
                DUP;        # @parameter%updateRegistrationPeriod : @parameter%updateRegistrationPeriod : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @storage
                DUG 7;      # @parameter%updateRegistrationPeriod : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : @storage
                CDR;        # string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : @storage
                DUP;        # string : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : @storage
                DUG 2;      # string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : @storage
                GET;        # option (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : @storage
                IF_SOME
                  {
                    # of_some: set_in_top-any # @some : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : @storage
                  }
                  {
                    PUSH string "set_in_top-any"; # string : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : @storage
                    FAILWITH;   # FAILED
                  }; # @some : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : @storage
                DUP;        # @some : @some : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : @storage
                CAR;        # pair (bool %modified) (pair (string %name) (address %owner)) : @some : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : @storage
                SWAP;       # @some : pair (bool %modified) (pair (string %name) (address %owner)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : @storage
                CDR;        # pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)) : pair (bool %modified) (pair (string %name) (address %owner)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : @storage
                DUP;        # pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)) : pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)) : pair (bool %modified) (pair (string %name) (address %owner)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : @storage
                CAR;        # timestamp : pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)) : pair (bool %modified) (pair (string %name) (address %owner)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : @storage
                SWAP;       # pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)) : timestamp : pair (bool %modified) (pair (string %name) (address %owner)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : @storage
                CDDR;       # address : timestamp : pair (bool %modified) (pair (string %name) (address %owner)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : @storage
                DIG 9;      # @parameter%updateRegistrationPeriod : address : timestamp : pair (bool %modified) (pair (string %name) (address %owner)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @storage
                DUP;        # @parameter%updateRegistrationPeriod : @parameter%updateRegistrationPeriod : address : timestamp : pair (bool %modified) (pair (string %name) (address %owner)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @storage
                DUG 10;     # @parameter%updateRegistrationPeriod : address : timestamp : pair (bool %modified) (pair (string %name) (address %owner)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : @storage
                CAR;        # int : address : timestamp : pair (bool %modified) (pair (string %name) (address %owner)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : @storage
                PAIR;       # pair int address : timestamp : pair (bool %modified) (pair (string %name) (address %owner)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : @storage
                SWAP;       # timestamp : pair int address : pair (bool %modified) (pair (string %name) (address %owner)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : @storage
                PAIR;       # pair timestamp (pair int address) : pair (bool %modified) (pair (string %name) (address %owner)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : @storage
                SWAP;       # pair (bool %modified) (pair (string %name) (address %owner)) : pair timestamp (pair int address) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : @storage
                PAIR;       # pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : @storage
                SOME;       # option (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : @storage
                SWAP;       # string : option (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : @storage
                UPDATE;     # big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : @storage
                PAIR;       # pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : @storage
                SWAP;       # int : pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : @storage
                PAIR;       # pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez) : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : @storage
                SWAP;       # pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez) : mutez : @parameter%updateRegistrationPeriod : @storage
                PAIR;       # pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez)) : mutez : @parameter%updateRegistrationPeriod : @storage
                DUG 3;      # mutez : @parameter%updateRegistrationPeriod : @storage : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                DIG 2;      # @storage : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                DROP;       # mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                # self.data.nameRegistry[params.name].modified = True # mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                DIG 2;      # pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez)) : mutez : @parameter%updateRegistrationPeriod
                DUP;        # pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez)) : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez)) : mutez : @parameter%updateRegistrationPeriod
                DUG 3;      # pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez)) : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                DUP;        # pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez)) : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez)) : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                CAR;        # pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez)) : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                SWAP;       # pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez)) : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                CDR;        # pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez) : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                DUP;        # pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez) : pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez) : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                CAR;        # int : pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez) : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                SWAP;       # pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez) : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                CDR;        # pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                DUP;        # pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez : pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                CDR;        # mutez : pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                SWAP;       # pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                CAR;        # big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                DUP;        # big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                DIG 6;      # @parameter%updateRegistrationPeriod : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                DUP;        # @parameter%updateRegistrationPeriod : @parameter%updateRegistrationPeriod : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                DUG 7;      # @parameter%updateRegistrationPeriod : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                CDR;        # string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                DUP;        # string : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                DUG 2;      # string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                GET;        # option (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                IF_SOME
                  {
                    # of_some: set_in_top-any # @some : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                  }
                  {
                    PUSH string "set_in_top-any"; # string : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                    FAILWITH;   # FAILED
                  }; # @some : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                DUP;        # @some : @some : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                CDR;        # pair timestamp (pair int address) : @some : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                SWAP;       # @some : pair timestamp (pair int address) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                CADR;       # pair (string %name) (address %owner) : pair timestamp (pair int address) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                PUSH bool True; # bool : pair (string %name) (address %owner) : pair timestamp (pair int address) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                PAIR;       # pair bool (pair (string %name) (address %owner)) : pair timestamp (pair int address) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                PAIR;       # pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                SOME;       # option (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                SWAP;       # string : option (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                UPDATE;     # big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                PAIR;       # pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                SWAP;       # int : pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                PAIR;       # pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez) : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                SWAP;       # pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez) : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                PAIR;       # pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez)) : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                DUG 3;      # mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez)) : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                DIG 2;      # pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez)) : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                DROP;       # mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                # if cost.value < (sp.amount - self.data.price): # mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                DIG 2;      # pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez)) : mutez : @parameter%updateRegistrationPeriod
                DUP;        # pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez)) : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez)) : mutez : @parameter%updateRegistrationPeriod
                DUG 3;      # pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez)) : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                CDDDR;      # mutez : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                AMOUNT;     # mutez : mutez : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                SUB;        # mutez : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                SWAP;       # mutez : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                DUP;        # mutez : mutez : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                DUG 2;      # mutez : mutez : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                COMPARE;    # int : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                LT;         # bool : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                IF
                  {
                    # sp.send(sp.sender, sp.amount - cost.value) # mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                    NIL operation; # list operation : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                    SENDER;     # address : list operation : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                    CONTRACT unit; # option (contract unit) : list operation : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                    IF_SOME
                      {}
                      {
                        PUSH unit Unit; # unit : list operation : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                        FAILWITH;   # FAILED
                      }; # @some : list operation : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                    DIG 2;      # mutez : @some : list operation : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                    DUP;        # mutez : mutez : @some : list operation : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                    DUG 3;      # mutez : @some : list operation : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                    AMOUNT;     # mutez : mutez : @some : list operation : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                    SUB;        # mutez : @some : list operation : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                    PUSH unit Unit; # unit : mutez : @some : list operation : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                    TRANSFER_TOKENS; # operation : list operation : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                    CONS;       # list operation : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                  }
                  {
                    NIL operation; # list operation : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                  }; # list operation : mutez : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                SWAP;       # mutez : list operation : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                DROP;       # list operation : @parameter%updateRegistrationPeriod : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                SWAP;       # @parameter%updateRegistrationPeriod : list operation : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                DROP;       # list operation : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
              }
              {
                # Entry point: updateResolver # @parameter%updateResolver : @storage
                # sp.verify(self.data.nameRegistry.contains(params.name), message = 'Name not registered') # @parameter%updateResolver : @storage
                SWAP;       # @storage : @parameter%updateResolver
                DUP;        # @storage : @storage : @parameter%updateResolver
                DUG 2;      # @storage : @parameter%updateResolver : @storage
                CDDAR;      # big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%updateResolver : @storage
                SWAP;       # @parameter%updateResolver : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @storage
                DUP;        # @parameter%updateResolver : @parameter%updateResolver : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @storage
                DUG 2;      # @parameter%updateResolver : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%updateResolver : @storage
                CAR;        # string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%updateResolver : @storage
                MEM;        # bool : @parameter%updateResolver : @storage
                IF
                  {}
                  {
                    PUSH string "Name not registered"; # string : @parameter%updateResolver : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%updateResolver : @storage
                # sp.verify(~ (sp.now > sp.add_seconds(self.data.nameRegistry[params.name].registeredAt, self.data.nameRegistry[params.name].registrationPeriod)), message = 'Name registration has expired') # @parameter%updateResolver : @storage
                SWAP;       # @storage : @parameter%updateResolver
                DUP;        # @storage : @storage : @parameter%updateResolver
                DUG 2;      # @storage : @parameter%updateResolver : @storage
                CDDAR;      # big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%updateResolver : @storage
                SWAP;       # @parameter%updateResolver : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @storage
                DUP;        # @parameter%updateResolver : @parameter%updateResolver : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @storage
                DUG 2;      # @parameter%updateResolver : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%updateResolver : @storage
                CAR;        # string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%updateResolver : @storage
                GET;        # option (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%updateResolver : @storage
                IF_SOME
                  {
                    # of_some: Get-item:79 # @some : @parameter%updateResolver : @storage
                  }
                  {
                    PUSH string "Get-item:79"; # string : @parameter%updateResolver : @storage
                    FAILWITH;   # FAILED
                  }; # @some : @parameter%updateResolver : @storage
                CDAR;       # timestamp : @parameter%updateResolver : @storage
                DIG 2;      # @storage : timestamp : @parameter%updateResolver
                DUP;        # @storage : @storage : timestamp : @parameter%updateResolver
                DUG 3;      # @storage : timestamp : @parameter%updateResolver : @storage
                CDDAR;      # big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : timestamp : @parameter%updateResolver : @storage
                DIG 2;      # @parameter%updateResolver : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : timestamp : @storage
                DUP;        # @parameter%updateResolver : @parameter%updateResolver : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : timestamp : @storage
                DUG 3;      # @parameter%updateResolver : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : timestamp : @parameter%updateResolver : @storage
                CAR;        # string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : timestamp : @parameter%updateResolver : @storage
                GET;        # option (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : timestamp : @parameter%updateResolver : @storage
                IF_SOME
                  {
                    # of_some: Get-item:79 # @some : timestamp : @parameter%updateResolver : @storage
                  }
                  {
                    PUSH string "Get-item:79"; # string : timestamp : @parameter%updateResolver : @storage
                    FAILWITH;   # FAILED
                  }; # @some : timestamp : @parameter%updateResolver : @storage
                CDDAR;      # int : timestamp : @parameter%updateResolver : @storage
                ADD;        # timestamp : @parameter%updateResolver : @storage
                NOW;        # timestamp : timestamp : @parameter%updateResolver : @storage
                COMPARE;    # int : @parameter%updateResolver : @storage
                GT;         # bool : @parameter%updateResolver : @storage
                IF
                  {
                    PUSH string "Name registration has expired"; # string : @parameter%updateResolver : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @parameter%updateResolver : @storage
                # sp.verify((sp.sender == self.data.nameRegistry[params.name].owner) | (sp.sender == self.data.domainManager), message = 'Invalid permissions') # @parameter%updateResolver : @storage
                SWAP;       # @storage : @parameter%updateResolver
                DUP;        # @storage : @storage : @parameter%updateResolver
                DUG 2;      # @storage : @parameter%updateResolver : @storage
                CDDAR;      # big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%updateResolver : @storage
                SWAP;       # @parameter%updateResolver : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @storage
                DUP;        # @parameter%updateResolver : @parameter%updateResolver : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @storage
                DUG 2;      # @parameter%updateResolver : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%updateResolver : @storage
                CAR;        # string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%updateResolver : @storage
                GET;        # option (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : @parameter%updateResolver : @storage
                IF_SOME
                  {
                    # of_some: Get-item:79 # @some : @parameter%updateResolver : @storage
                  }
                  {
                    PUSH string "Get-item:79"; # string : @parameter%updateResolver : @storage
                    FAILWITH;   # FAILED
                  }; # @some : @parameter%updateResolver : @storage
                CADDR;      # address : @parameter%updateResolver : @storage
                SENDER;     # address : address : @parameter%updateResolver : @storage
                COMPARE;    # int : @parameter%updateResolver : @storage
                EQ;         # bool : @parameter%updateResolver : @storage
                IF
                  {
                    PUSH bool True; # bool : @parameter%updateResolver : @storage
                  }
                  {
                    SWAP;       # @storage : @parameter%updateResolver
                    DUP;        # @storage : @storage : @parameter%updateResolver
                    DUG 2;      # @storage : @parameter%updateResolver : @storage
                    CADAR;      # address : @parameter%updateResolver : @storage
                    SENDER;     # address : address : @parameter%updateResolver : @storage
                    COMPARE;    # int : @parameter%updateResolver : @storage
                    EQ;         # bool : @parameter%updateResolver : @storage
                  }; # bool : @parameter%updateResolver : @storage
                IF
                  {}
                  {
                    PUSH string "Invalid permissions"; # string : @parameter%updateResolver : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%updateResolver : @storage
                # self.data.nameRegistry[params.name].resolver = params.resolver # @parameter%updateResolver : @storage
                SWAP;       # @storage : @parameter%updateResolver
                DUP;        # @storage : @storage : @parameter%updateResolver
                DUG 2;      # @storage : @parameter%updateResolver : @storage
                DUP;        # @storage : @storage : @parameter%updateResolver : @storage
                CAR;        # pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @storage : @parameter%updateResolver : @storage
                SWAP;       # @storage : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : @storage
                CDR;        # pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : @storage
                DUP;        # pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : @storage
                CAR;        # int : pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : @storage
                SWAP;       # pair (int %maxDuration) (pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price)) : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : @storage
                CDR;        # pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price) : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : @storage
                DUP;        # pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price) : pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price) : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : @storage
                CDR;        # mutez : pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price) : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : @storage
                SWAP;       # pair (big_map %nameRegistry string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) (mutez %price) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : @storage
                CAR;        # big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : @storage
                DUP;        # big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : @storage
                DIG 5;      # @parameter%updateResolver : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @storage
                DUP;        # @parameter%updateResolver : @parameter%updateResolver : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @storage
                DUG 6;      # @parameter%updateResolver : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : @storage
                CAR;        # string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : @storage
                DUP;        # string : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : @storage
                DUG 2;      # string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : @storage
                GET;        # option (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : @storage
                IF_SOME
                  {
                    # of_some: set_in_top-any # @some : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : @storage
                  }
                  {
                    PUSH string "set_in_top-any"; # string : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : @storage
                    FAILWITH;   # FAILED
                  }; # @some : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : @storage
                DUP;        # @some : @some : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : @storage
                CAR;        # pair (bool %modified) (pair (string %name) (address %owner)) : @some : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : @storage
                SWAP;       # @some : pair (bool %modified) (pair (string %name) (address %owner)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : @storage
                CDR;        # pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)) : pair (bool %modified) (pair (string %name) (address %owner)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : @storage
                DUP;        # pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)) : pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)) : pair (bool %modified) (pair (string %name) (address %owner)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : @storage
                CAR;        # timestamp : pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)) : pair (bool %modified) (pair (string %name) (address %owner)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : @storage
                SWAP;       # pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)) : timestamp : pair (bool %modified) (pair (string %name) (address %owner)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : @storage
                CDAR;       # int : timestamp : pair (bool %modified) (pair (string %name) (address %owner)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : @storage
                DIG 8;      # @parameter%updateResolver : int : timestamp : pair (bool %modified) (pair (string %name) (address %owner)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @storage
                DUP;        # @parameter%updateResolver : @parameter%updateResolver : int : timestamp : pair (bool %modified) (pair (string %name) (address %owner)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @storage
                DUG 9;      # @parameter%updateResolver : int : timestamp : pair (bool %modified) (pair (string %name) (address %owner)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : @storage
                CDR;        # address : int : timestamp : pair (bool %modified) (pair (string %name) (address %owner)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : @storage
                SWAP;       # int : address : timestamp : pair (bool %modified) (pair (string %name) (address %owner)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : @storage
                PAIR;       # pair int address : timestamp : pair (bool %modified) (pair (string %name) (address %owner)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : @storage
                SWAP;       # timestamp : pair int address : pair (bool %modified) (pair (string %name) (address %owner)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : @storage
                PAIR;       # pair timestamp (pair int address) : pair (bool %modified) (pair (string %name) (address %owner)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : @storage
                SWAP;       # pair (bool %modified) (pair (string %name) (address %owner)) : pair timestamp (pair int address) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : @storage
                PAIR;       # pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : @storage
                SOME;       # option (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : @storage
                SWAP;       # string : option (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver)))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : @storage
                UPDATE;     # big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : @storage
                PAIR;       # pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : @storage
                SWAP;       # int : pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : @storage
                PAIR;       # pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez) : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : @storage
                SWAP;       # pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez) : @parameter%updateResolver : @storage
                PAIR;       # pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez)) : @parameter%updateResolver : @storage
                DUG 2;      # @parameter%updateResolver : @storage : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                SWAP;       # @storage : @parameter%updateResolver : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                DROP;       # @parameter%updateResolver : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                # self.data.nameRegistry[params.name].modified = True # @parameter%updateResolver : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                SWAP;       # pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez)) : @parameter%updateResolver
                DUP;        # pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez)) : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez)) : @parameter%updateResolver
                DUG 2;      # pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez)) : @parameter%updateResolver : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                DUP;        # pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez)) : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez)) : @parameter%updateResolver : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                CAR;        # pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez)) : @parameter%updateResolver : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                SWAP;       # pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez)) : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                CDR;        # pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez) : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                DUP;        # pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez) : pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez) : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                CAR;        # int : pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez) : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                SWAP;       # pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez) : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                CDR;        # pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                DUP;        # pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez : pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                CDR;        # mutez : pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                SWAP;       # pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                CAR;        # big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                DUP;        # big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                DIG 5;      # @parameter%updateResolver : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                DUP;        # @parameter%updateResolver : @parameter%updateResolver : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                DUG 6;      # @parameter%updateResolver : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                CAR;        # string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                DUP;        # string : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                DUG 2;      # string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                GET;        # option (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                IF_SOME
                  {
                    # of_some: set_in_top-any # @some : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                  }
                  {
                    PUSH string "set_in_top-any"; # string : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                    FAILWITH;   # FAILED
                  }; # @some : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                DUP;        # @some : @some : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                CDR;        # pair timestamp (pair int address) : @some : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                SWAP;       # @some : pair timestamp (pair int address) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                CADR;       # pair (string %name) (address %owner) : pair timestamp (pair int address) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                PUSH bool True; # bool : pair (string %name) (address %owner) : pair timestamp (pair int address) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                PAIR;       # pair bool (pair (string %name) (address %owner)) : pair timestamp (pair int address) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                PAIR;       # pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                SOME;       # option (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : string : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                SWAP;       # string : option (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                UPDATE;     # big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address))) : mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                PAIR;       # pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez : int : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                SWAP;       # int : pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                PAIR;       # pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez) : pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : @parameter%updateResolver : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                SWAP;       # pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval)) : pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez) : @parameter%updateResolver : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                PAIR;       # pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez)) : @parameter%updateResolver : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                DUG 2;      # @parameter%updateResolver : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez)) : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                DROP;       # pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez)) : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                DROP;       # pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
                NIL operation; # list operation : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
              }; # list operation : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair (string %name) (address %owner))) (pair timestamp (pair int address)))) mutez))
          }; # list operation : pair (pair (big_map %addressRegistry address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair bool (pair string address)) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
      }; # list operation : pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez))
    PAIR;       # pair (list operation) (pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez)))
  } # pair (list operation) (pair (pair (big_map address string) (pair (address %domainManager) (int %interval))) (pair int (pair (big_map string (pair (pair (bool %modified) (pair (string %name) (address %owner))) (pair (timestamp %registeredAt) (pair (int %registrationPeriod) (address %resolver))))) mutez)));
