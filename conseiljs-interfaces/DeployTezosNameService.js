"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var conseiljs_1 = require("conseiljs");
var tezosNode = 'https://tezos-dev.cryptonomic-infra.tech/';
function deployContract() {
    return __awaiter(this, void 0, void 0, function () {
        var keystore, michelson, michelson_storage, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    keystore = {
                        publicKey: 'edpkuuGJ4ssH3N5k7ovwkBe16p8rVX1XLENiZ4FAayrcwUf9sCKXnG',
                        privateKey: 'edskRpVqFG2FHo11aB9pzbnHBiPBWhNWdwtNyQSfEEhDf5jhFbAtNS41vg9as7LSYZv6rEbtJTwyyEg9cNDdcAkSr9Z7hfvquB',
                        publicKeyHash: 'tz1WpPzK6NwWVTJcXqFvYmoA6msQeVy1YP6z',
                        seed: '',
                        storeType: conseiljs_1.StoreType.Fundraiser
                    };
                    michelson = "\n    # Title: Tezos Name Service\n    # Author: Teckhua Chiang\n    # Company: Cryptonomic Inc.\n\n    parameter\n    (or (pair string (pair address int))\n        (or (pair string address) (or (pair string int) (or (pair string address) string))));\n    storage (pair (big_map string (pair address (pair address int))) string);\n    code { DUP ;\n        DIP { CDR ;\n        CAR ;\n        LAMBDA \n            (pair nat nat)\n            nat\n            { RENAME ;\n            DUP ;\n            CDR ;\n            DUUP ;\n            CAR ;\n            SUB ;\n            DUP ;\n            ABS ;\n            SWAP ;\n            GE ;\n            IF {} { UNIT ; FAILWITH } ;\n            DIP { DROP } } ;\n        DUP ;\n        DUUP ;\n        LAMBDA \n            (pair (pair nat (pair nat string)) (lambda (pair nat nat) nat))\n            string\n            { RENAME ;\n            DUP ;\n            CAR ;\n            CAR ;\n            DUUP ;\n            CAR ;\n            CDR ;\n            CDR ;\n            DUUUP ;\n            CDR ;\n            DUUUP ;\n            DUUUUUP ;\n            CAR ;\n            CDR ;\n            CAR ;\n            PAIR ;\n            EXEC ;\n            DUUUP ;\n            SLICE ;\n            IF_NONE { UNIT ; FAILWITH } {} ;\n            DIP { DROP ; DROP } } ;\n        PAIR ;\n        PAIR ;\n        LAMBDA \n            (pair string\n                (pair (pair (lambda (pair (pair nat (pair nat string)) (lambda (pair nat nat) nat)) string)\n                            (lambda (pair nat nat) nat))\n                        (lambda (pair nat nat) nat)))\n            (list string)\n            { RENAME ;\n            NIL string ;\n            DUUP ;\n            CDR ;\n            CDR ;\n            PUSH nat 1 ;\n            DUUUUP ;\n            CAR ;\n            SIZE ;\n            PAIR ;\n            EXEC ;\n            PAIR ;\n            PUSH bool True ;\n            LOOP { RENAME ;\n                    DUUP ;\n                    CAR ;\n                    PUSH nat 1 ;\n                    DUUUP ;\n                    CAR ;\n                    SLICE ;\n                    IF_NONE\n                        { UNIT ; FAILWITH }\n                        { PUSH nat 0 ;\n                        DUUUP ;\n                        CAR ;\n                        COMPARE ;\n                        EQ ;\n                        IF { DUUP ;\n                            CDR ;\n                            DUUUUP ;\n                            CAR ;\n                            CONS ;\n                            DUUUP ;\n                            CAR ;\n                            PAIR ;\n                            PUSH bool False ;\n                            PAIR }\n                            { PUSH string \".\" ;\n                            DUUP ;\n                            COMPARE ;\n                            EQ ;\n                            IF { DUUUP ;\n                                    CDR ;\n                                    CAR ;\n                                    DUUUP ;\n                                    CDR ;\n                                    DUUP ;\n                                    CAR ;\n                                    DUUUP ;\n                                    DIIIP { DROP } ;\n                                    CDR ;\n                                    DUUUUUUP ;\n                                    CAR ;\n                                    DUUUUUUUP ;\n                                    CAR ;\n                                    SIZE ;\n                                    PAIR ;\n                                    PUSH nat 1 ;\n                                    DUUUUUUUP ;\n                                    CAR ;\n                                    ADD ;\n                                    PAIR ;\n                                    PAIR ;\n                                    EXEC ;\n                                    CONS ;\n                                    DUUUUP ;\n                                    CDR ;\n                                    CDR ;\n                                    PUSH nat 1 ;\n                                    DUUUUUP ;\n                                    CAR ;\n                                    PAIR ;\n                                    EXEC ;\n                                    PAIR ;\n                                    PUSH bool True ;\n                                    PAIR }\n                                { DUUP ;\n                                    CDR ;\n                                    DUUUUP ;\n                                    CDR ;\n                                    CDR ;\n                                    PUSH nat 1 ;\n                                    DUUUUUP ;\n                                    CAR ;\n                                    PAIR ;\n                                    EXEC ;\n                                    PAIR ;\n                                    PUSH bool True ;\n                                    PAIR } } ;\n                        DIP { DROP } } ;\n                    DIP { DROP } ;\n                    DUP ;\n                    CAR ;\n                    DIP { CDR } } ;\n            DIP { DROP } ;\n            RENAME ;\n            CDR } ;\n        PAIR ;\n        LAMBDA \n            (pair (pair string (pair (big_map string (pair address (pair address int))) string))\n                (pair (lambda\n                            (pair string\n                                (pair (pair (lambda (pair (pair nat (pair nat string)) (lambda (pair nat nat) nat)) string)\n                                            (lambda (pair nat nat) nat))\n                                        (lambda (pair nat nat) nat)))\n                            (list string))\n                        (pair (pair (lambda (pair (pair nat (pair nat string)) (lambda (pair nat nat) nat)) string)\n                                    (lambda (pair nat nat) nat))\n                            (lambda (pair nat nat) nat))))\n            bool\n            { RENAME ;\n            DUP ;\n            CDR ;\n            PUSH bool False ;\n            DUUP ;\n            CAR ;\n            DUUUP ;\n            CDR ;\n            DUUUUUP ;\n            CAR ;\n            CAR ;\n            PAIR ;\n            EXEC ;\n            ITER { RENAME ;\n                    DIP { DUP } ;\n                    PAIR ;\n                    DUUUUP ;\n                    CAR ;\n                    CDR ;\n                    CAR ;\n                    DUUP ;\n                    CAR ;\n                    GET ;\n                    IF_NONE\n                        { DUP ; CDR }\n                        { DUP ;\n                        CAR ;\n                        SENDER ;\n                        COMPARE ;\n                        EQ ;\n                        IF { PUSH bool True ; DUUUP ; CDR ; COMPARE ; EQ } { DUUP ; CDR } ;\n                        DIP { DROP } } ;\n                    DIP { DROP ; DROP } } ;\n            DIP { DROP ; DROP } } ;\n        DUUP ;\n        DUUP ;\n        PAIR ;\n        DUUUUUP ;\n        IF_LEFT\n            { RENAME ;\n            DUP ;\n            CAR ;\n            DUUUUUUUUP ;\n            CAR ;\n            DUUP ;\n            GET ;\n            IF_NONE\n                { DUUUUP ;\n                DUUUUUUP ;\n                DUUUUUUUUUUP ;\n                DUUUUP ;\n                PAIR ;\n                PAIR ;\n                EXEC ;\n                IF { DUUUUUUUUP ;\n                        CDR ;\n                        DUUUUUUUUUP ;\n                        CAR ;\n                        DUUUUP ;\n                        CDR ;\n                        CDR ;\n                        DUUUUUP ;\n                        CDR ;\n                        CAR ;\n                        PAIR ;\n                        SENDER ;\n                        PAIR ;\n                        DUUUUP ;\n                        DIP { SOME } ;\n                        UPDATE ;\n                        PAIR ;\n                        NIL operation ;\n                        PAIR }\n                    { DUP ;\n                        PUSH string \"You do not have permission to register that domain: \" ;\n                        PAIR ;\n                        FAILWITH } }\n                { DUUP ;\n                PUSH string \"Domain is not available: \" ;\n                PAIR ;\n                FAILWITH } ;\n            DIP { DROP ; DROP } }\n            { RENAME ;\n            DUP ;\n            IF_LEFT\n                { RENAME ;\n                DUP ;\n                CAR ;\n                DUUUUUUUUUP ;\n                CAR ;\n                DUUP ;\n                GET ;\n                IF_NONE\n                    { DUP ; FAILWITH }\n                    { DUP ;\n                    CAR ;\n                    SENDER ;\n                    COMPARE ;\n                    EQ ;\n                    IF { DUUUUUUUUUUP ;\n                            CDR ;\n                            DUUUUUUUUUUUP ;\n                            CAR ;\n                            DUUUP ;\n                            CDR ;\n                            CDR ;\n                            DUUUUUUP ;\n                            CDR ;\n                            PAIR ;\n                            DUUUUP ;\n                            CAR ;\n                            PAIR ;\n                            DUUUUUP ;\n                            DIP { SOME } ;\n                            UPDATE ;\n                            PAIR ;\n                            NIL operation ;\n                            PAIR }\n                        { DUUP ;\n                            PUSH string \"You do not own that domain: \" ;\n                            PAIR ;\n                            FAILWITH } ;\n                    DIP { DROP } } ;\n                DIP { DROP ; DROP } }\n                { RENAME ;\n                DUP ;\n                IF_LEFT\n                    { RENAME ;\n                    DUP ;\n                    CAR ;\n                    DUUUUUUUUUUP ;\n                    CAR ;\n                    DUUP ;\n                    GET ;\n                    IF_NONE\n                        { DUP ; FAILWITH }\n                        { DUP ;\n                        CAR ;\n                        SENDER ;\n                        COMPARE ;\n                        EQ ;\n                        IF { DUUUUUUUUUUUP ;\n                                CDR ;\n                                DUUUUUUUUUUUUP ;\n                                CAR ;\n                                DUUUUUP ;\n                                CDR ;\n                                DUUUUP ;\n                                CDR ;\n                                CAR ;\n                                PAIR ;\n                                DUUUUP ;\n                                CAR ;\n                                PAIR ;\n                                DUUUUUP ;\n                                DIP { SOME } ;\n                                UPDATE ;\n                                PAIR ;\n                                NIL operation ;\n                                PAIR }\n                            { DUUP ;\n                                PUSH string \"You do not own that domain: \" ;\n                                PAIR ;\n                                FAILWITH } ;\n                        DIP { DROP } } ;\n                    DIP { DROP ; DROP } }\n                    { RENAME ;\n                    DUP ;\n                    IF_LEFT\n                        { RENAME ;\n                        DUP ;\n                        CAR ;\n                        DUUUUUUUUUUUP ;\n                        CAR ;\n                        DUUP ;\n                        GET ;\n                        IF_NONE\n                            { DUP ; FAILWITH }\n                            { DUUUUUUUUP ;\n                            DUUUUUUUUUUP ;\n                            DUUUUUUUUUUUUUUP ;\n                            DUUUUUP ;\n                            PAIR ;\n                            PAIR ;\n                            EXEC ;\n                            IF { DUUUUUUUUUUUUP ;\n                                    CDR ;\n                                    DUUUUUUUUUUUUUP ;\n                                    CAR ;\n                                    DUUUP ;\n                                    CDR ;\n                                    DUUUUUUP ;\n                                    CDR ;\n                                    PAIR ;\n                                    DUUUUUP ;\n                                    DIP { SOME } ;\n                                    UPDATE ;\n                                    PAIR ;\n                                    NIL operation ;\n                                    PAIR }\n                                { DUUP ;\n                                    PUSH string \"You do not have permission to transfer that domain: \" ;\n                                    PAIR ;\n                                    FAILWITH } ;\n                            DIP { DROP } } ;\n                        DIP { DROP ; DROP } }\n                        { RENAME ;\n                        DUUUUUUP ;\n                        DUUUUUUUUP ;\n                        DUUUUUUUUUUUUP ;\n                        DUUUUP ;\n                        PAIR ;\n                        PAIR ;\n                        EXEC ;\n                        IF { DUUUUUUUUUUP ;\n                                CDR ;\n                                DUUUUUUUUUUUP ;\n                                CAR ;\n                                DUUUP ;\n                                DIP { NONE (pair address (pair address int)) } ;\n                                UPDATE ;\n                                PAIR ;\n                                NIL operation ;\n                                PAIR }\n                            { DUP ;\n                                PUSH string \"You do not have permission to delete that domain: \" ;\n                                PAIR ;\n                                FAILWITH } ;\n                        DIP { DROP } } ;\n                    DIP { DROP } } ;\n                DIP { DROP } } ;\n            DIP { DROP } } ;\n        DIP { DROP ; DROP ; DROP ; DROP ; DROP ; DROP } };\n    ";
                    michelson_storage = 'Pair {} "Author: Teckhua Chiang, Company: Cryptonomic Inc."';
                    return [4 /*yield*/, conseiljs_1.TezosNodeWriter.sendContractOriginationOperation(tezosNode, keystore, 0, undefined, false, true, 100000, '', 1000, 100000, michelson, michelson_storage, conseiljs_1.TezosParameterFormat.Michelson)];
                case 1:
                    result = _a.sent();
                    console.log("Injected operation group id " + result.operationGroupID);
                    return [2 /*return*/];
            }
        });
    });
}
deployContract();
